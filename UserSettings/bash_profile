# ~/.bashrc made by Theo Massard

# @env variables
export GITHUB_CONFIG=/home/theo/etc/MyConfiguration
export HISTFILESIZE=20000
export HISTSIZE=10000
export HISTIGNORE="&:ls:[bf]g:exit:l:h:cd"
export GOPATH=/home/theo/usr/w/work
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
export CHEATCOLORS=true
export WINDOWS="10.0.2.2"
export PATH=$PATH:/usr/local/go/bin:/usr/local/go
export EDITOR=nvim
export PATH=$PATH:~/bin
export EDITOR_CONFIG=~/.config/nvim/init.vim
export CONFIG_TMUX=~/.tmux.conf
export CONFIG_SHELL=~/.bashrc
export Z_HOME=~/etc/z/z.sh

# @z opti cd
if [ -f $Z_HOME ];
then
	source $Z_HOME
fi

# @history management
shopt -s histappend
shopt -s cmdhist

# @mistake files
alias rm='rm -i' # @M.F
alias cp='cp -i' # @M.F
alias mv='mv -i' # @M.F

# @prompt simple
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\][\T]: \u @ $(hostname) \[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$\n[^_^]:>> '

# @opti permissions
alias chx="chmod 755" # @O.P
alias chr="chmod 644" # @O.P

function opti_perm {
    {
	echo "permission optimisation:"
	echo "chx     = chmod 755"
	echo "chr     = chmod 644"
    }
}

# @opti conf
alias SB='$EDITOR $CONFIG_SHELL; source $CONFIG_SHELL' # @O.C
alias SV='$EDITOR $EDITOR_CONFIG' # @O.C
alias ST='$EDITOR $CONFIG_TMUX; tmux source-file $CONFIG_TMUX' # @O.C
alias todo='$EDITOR ~/todo.org' # @O.C
alias notes='$EDITOR ~/notes.org' # @O.C
alias cgit='cd $GITHUB_CONFIG'

# @opti basic
alias v='$EDITOR' # @O.B
alias vi='$EDITOR' # @O.B
alias j="jobs" # @O.B
alias c="cat" # @O.B
alias g="git" # @O.B
alias sv="service" # @O.B
alias cu="curl" # @O.B
alias root='sudo -i' # @O.B Become root
alias h="history" # @O.B
alias wt="wtfaliases" # @O.B
alias tuc="top_used_commands" # @O.B
alias t="tmux" # @O.B
alias ssh="sshrc" # @O.B
alias reload_bash='source $CONFIG_SHELL' # @O.B
alias W="wc -l" # @O.B
alias H="head -n " # @O.B
alias T="tail -n " # @O.B

function wtfaliases {
    echo "Your aliases that contains $1 are:"
    pygmentize -g $CONFIG_SHELL | grep -C 1 "$1"
}

# @opti system
alias get_dir_size="du -sh" # @O.S prints size of directory

# @opti docker
alias dk="docker" # @O.D
alias dki="docker images" # @O.D
alias DBT="docker build -t" # @O.D
alias RUI="remove_untagged_images" # @O.D
alias DR="docker run" # @O.D
alias DPS="docker ps -a" # @O.D
alias de="docker exec" # @O.D
alias di="docker exec -it" # @O.D
alias da="docker ps -a" # @O.D
alias remove_untagged_images="docker images | grep '<none>' | grep -P '[1234567890abcdef]{12}' -o | xargs -L1 docker rmi" # @O.D

# @opti docker-compose
alias DC="docker-compose" # @O.C
alias DCB="docker-compose build" # @O.C
alias DCU="docker-compose up -d" # @O.C
alias DRB="docker-compose up -d --build; ./init_containers.sh --deploy" # @O.C
alias REB="DCB && DCU && ./init_containers.sh --deploy" # @O.C

# @ls tunings
alias ls="ls --color" # @LS
alias l="ls --color" # @LS
alias ll="ls -l" # @LS
alias la="ls -a" # @LS
alias lsh='ls -lhXG' # @LS long listing, human-readable, sort by extension, do not show group info
alias l-d="ls -d */"

function lc {
    cd "$1" || exit 1
    ls
}

# @output management
alias less='less -FSRX' # @O.M
alias G=" grep" # @O.M

# @opti network
alias ports="netstat -tulanp" # @O.N shows open ports

# @github general
alias ga="git add" # @G.G
alias gp="git push" # @G.G
alias gc="git commit -m" # @G.G
alias gclone="git clone --recursive" # @G.G
alias gl="git pull" # @G.G
alias gs="git status" # @G.G
alias gst="git status" # @G.G
alias gsmu="git submodule foreach git pull origin master" # @G.G
alias gm="git mv" # @G.G
alias gS="git submodule" # @G.G
alias gd="git diff" # @G.G
alias gf="git fetch" # @G.G
alias gb="git branch" # @G.G
alias gco="git checkout " # @G.G

function parse_git_branch {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

function github_general {
    {
	echo "optimisation github general:"
	echo "ga   = git add"
	echo "gp   = git push"
	echo "gc   = git commit -m"
	echo "gl   = git pull"
	echo "gs   = git status"
    }
}
# @github user
alias save_inputrc='cp ~/.inputrc $GITHUB_CONFIG/UserSettings/inputrc; cd $GITHUB_CONFIG;' # @G.U
alias save_git_stars="starred --username massard-t --sort" # @G.U

function github_user {
    {
	echo "optimisation github user:"
	echo "save_inputrc  = cp ~/.inputrc $GITHUB_CONFIG/UserSettings/inputrc; cd $GITHUB_CONFIG"
	echo "save_git_stars= python /THEO/github/starred/starred.py --username massard-t --sort"
    }
}

# @miscellianous
alias ..="cd .."
alias travel_in_paris="python /THEO/parikstra/parikstra.py"
alias TU="top_used_commands"
alias ungron="gron --ungron"
alias scratch="cd /tmp"
alias slack="slack-term-linux-amd64 -config ~/bin/configs/slack_config.json"

function replace_every_string {
    egrep -lRZ "$1" . | xargs -0 -l sed -i -e "s/$1/$2/g"
}

function top_used_commands { # prints the top 15 typed commands
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n15
}

function space_left { # prints the space left on the machine
    echo "Device         Total  Used  Free  Pct MntPoint"
    df -h | grep "/dev/sd"
    df -h | grep "/mnt"
}

function get_uptime { # pretty prints uptime
    uptime | awk '{ print "Uptime:", $3, $4, $5 }' | sed 's/,//g'
    return;
}

function f_string_in_files {
    find . -type f -iname "$2" -exec grep -l "$1" {} +
}

function small_clock {
    while true; do clear;echo "===========";date +"%r";echo "===========";sleep 1;done
}
# Useless on VM
#function myinfo () {
#    printf "CPU: "
#    cat /proc/cpuinfo | grep "model name" | head -1 | awk '{ for (i = 4; i <= NF; i++) printf "%s ", $i }'
#    printf "\n"
#    cat /etc/issue | awk '{ printf "OS: %s %s %s %s | " , $1 , $2 , $3 , $4 }'
#    uname -a | awk '{ printf "Kernel: %s " , $3 }'
#    uname -m | awk '{ printf "%s | " , $1 }'
#    kded4 --version | grep "KDE Development Platform" | awk '{ printf "KDE: %s", $4 }'
#    printf "\n"   uptime | awk '{ printf "Uptime: %s %s %s", $3, $4, $5 }' | sed 's/,//g'
#    #printf "\n"   cputemp | head -1 | awk '{ printf "%s %s %s\n", $1, $2, $3 }'
#    #cputemp | tail -1 | awk '{ printf "%s %s %s\n", $1, $2, $3 }'   #cputemp | awk '{ printf "%s %s", $1 $2 }' }'""''""''""''""''""''""''""''""}'
#}

function bashtips {
    {
	echo "DIRECTORIES"
	echo "-----------"
	echo "~-  	Previous working directory"
	echo "pushd tmp   Push tmp && cd tmp"
	echo "popd    	Pop && cd"
	echo ""
	echo "GLOBBING AND OUTPUT SUBSTITUTION"
	echo "--------------------------------"
	echo "ls a[b-dx]e Globs abe, ace, ade, axe"
	echo "ls a{c,bl}e Globs ace, able"
	echo "\$(\ls)  	\`ls\` (but nestable!)"
	echo ""
	echo "HISTORY MANIPULATION"
	echo "--------------------"
	echo "!!  	Last command"
	echo "!?foo   	Last command containing \`foo'"
	echo "^foo^bar^   Last command containing \`foo', but substitute \`bar'"
	echo "!!:0    	Last command word"
	echo "!!:^    	Last command's first argument"
	echo "!\$ 	Last command's last argument"
	echo "!!:*    	Last command's arguments"
	echo "!!:x-y  	Arguments x to y of last command"
	echo "C-s 	search forwards in history"
	echo "C-r 	search backwards in history"
	echo ""
	echo "LINE EDITING"
	echo "------------"
	echo "M-d 	kill to end of word"
	echo "C-w 	kill to beginning of word"
	echo "C-k 	kill to end of line"
	echo "C-u 	kill to beginning of line"
	echo "M-r 	revert all modifications to current line"
	echo "C-] 	search forwards in line"
	echo "M-C-]   	search backwards in line"
	echo "C-t 	transpose characters"
	echo "M-t 	transpose words"
	echo "M-u 	uppercase word"
	echo "M-l 	lowercase word"
	echo "M-c 	capitalize word"
	echo ""
	echo "COMPLETION"
	echo "----------"
	echo "M-/ 	complete filename"
	echo "M-~ 	complete user name"
	echo "M-@ 	complete host name"
	echo "M-\$    	complete variable name"
	echo "M-! 	complete command name"
	echo "M-^ 	complete history"
    }
}

function find_missing_file {
    find "$1" -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/$2" ';' -print
}

# TODO: Move every function inside other file and source it
# TODO: Comment every function
# TODO: Work on install script
# TODO: Work on new_vm script

### Custom aliases (auto-completion)
thefuck --alias &> /dev/null
if [ $? == 0 ];
then
    eval "$(thefuck --alias)"
fi
