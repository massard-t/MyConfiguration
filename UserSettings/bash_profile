# ~/.bashrc made by Theo Massard

# @env variables
export GITHUB_CONFIG=/THEO/github/MyConfiguration/
export HISTFILESIZE=20000
export HISTSIZE=10000
export HISTIGNORE="&:ls:[bf]g:exit"
export GOPATH=~/work
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN

# @history management
shopt -s histappend
shopt -s cmdhist

# @mistake files
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# @prompt simple
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u @ VM_1 - 2222 \[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# @opti permissions
alias chx="chmod 755"
alias chr="chmod 644"

# @opti conf
alias SB="emacs ~/.bashrc; source ~/.bashrc"
alias SE="emacs ~/.emacs.d/init.el"

function opti_config() {
    {
	echo "configuration optimisation:"
	echo "SB    = \"emacs ~/.bashrc; source ~/.bashrc\""
	echo "SE    = \"emacs ~/.emacs.d/init.el\""
    }
}

# @opti basic
alias e="emacs"
alias j="jobs"
alias c="cat"
alias g="git"
alias sv="service"
alias cu="curl"
alias root='sudo -i' # Become root
alias h="history"

function opti_basic_info() {
    {
	echo "basic optimisation aliases:"
	echo "e    = emacs"
	echo "j    = jobs"
	echo "c    = cat"
	echo "g    = git"
	echo "sv   = service"
	echo "cu   = curl"
	echo "root = sudo -i"
    }
}

# @opti docker
alias dk="docker"
alias DC="docker-compose"
alias DCB="docker-compose build"
alias DCU="docker-compose up -d"
alias DRB="docker-compose up -d --build; ./init_databases.sh --deploy"
alias REB="DCB && DCU && ./init_databases.sh --deploy"
alias RUI="remove_untagged_images"

function opti_docker() {
    {
	echo "docker optimisation aliases:"
	echo "dk    = docker"
	echo "DC    = docker-compose"
	echo "DCB   = docker-compose build"
	echo "DCU   = docker-compose up -d"
	echo "DRB   = docker-compose up -d; ./init-databses.sh --deploy"
	echo "REB   = DCB && DCU && ./init_databases.sh --deploy"
	echo "RUI   = remove_untagged_images"
    }
}

# @ls tunings
alias ls="ls --color"
alias l="ls"
alias ll="ls -l"
alias la="ls -a"
alias lsh='ls -lhXG' # long listing, human-readable, sort by extension, do not show group info

function ls_aliases() {
    {
	echo "ls aliases:"
	echo "ls   = ls --color"
	echo "l    = ls"
	echo "la   = ls -a"
	echo "lsh  = ls -lhXG (long listing, sorts by extension, no group info)"
    }
}

function lc() {
    cd $1
    ls
}

# @output management
alias less='less -FSRX'
alias G=" | grep"

# @network
alias ports="netstat -tulanp" # shows open ports

# @github general
alias ga="git add"
alias gp="git push"
alias gc="git commit -m"
alias gl="git pull"
alias gs="git status"

# @github user
alias save_bash="cp ~/.bashrc $GITHUB_CONFIG/UserSettings/bash_profile; cd $GITHUB_CONFIG;"
alias save_inputrc="cp ~/.inputrc $GITHUB_CONFIG/UserSettings/inputrc; cd $GITHUB_CONFIG;"
alias get_git_stars="python /THEO/github/starred/starred.py --username massard-t --sort"

# @miscellianous
alias ".."="cd .."
alias travel_in_paris="python /THEO/parikstra/parikstra.py"
alias TU="top_used_commands"

function top_used_commands() { # prints the top 15 typed commands
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n15
}

function space_left() { # prints the space left on the machine
    echo "Device         Total  Used  Free  Pct MntPoint"
    df -h | grep "/dev/sd"
    df -h | grep "/mnt"
}

function get_uptime() { # pretty prints uptime
    uptime | awk '{ print "Uptime:", $3, $4, $5 }' | sed 's/,//g'
    return;
}

function f_string_in_files() {
    find . -type f -iname "$2" -exec grep -l "$1" {} +
}
# Useless on VM
#function myinfo () {
#    printf "CPU: "
#    cat /proc/cpuinfo | grep "model name" | head -1 | awk '{ for (i = 4; i <= NF; i++) printf "%s ", $i }'
#    printf "\n"
#    cat /etc/issue | awk '{ printf "OS: %s %s %s %s | " , $1 , $2 , $3 , $4 }'
#    uname -a | awk '{ printf "Kernel: %s " , $3 }'
#    uname -m | awk '{ printf "%s | " , $1 }'
#    kded4 --version | grep "KDE Development Platform" | awk '{ printf "KDE: %s", $4 }'
#    printf "\n"   uptime | awk '{ printf "Uptime: %s %s %s", $3, $4, $5 }' | sed 's/,//g'
#    #printf "\n"   cputemp | head -1 | awk '{ printf "%s %s %s\n", $1, $2, $3 }'
#    #cputemp | tail -1 | awk '{ printf "%s %s %s\n", $1, $2, $3 }'   #cputemp | awk '{ printf "%s %s", $1 $2 }' }'""''""''""''""''""''""''""''""}'
#}
export WINDOWS="10.0.2.2"
